default: 
  image: 
    name: ghcr.io/pm4ml/k3sbootstrap:0.14.0
  before_script:
    - test -n "$BUCKET"
    - test -n "$PM4ML_ENVIRONMENT"
    - test -n "$REGION"
    - sed -i "s/##accesskeyid##/${AWS_ACCESS_KEY_ID}/g" /k3s-boot/aws_conf
    - sed -i "s|##accesssecret##|${AWS_SECRET_ACCESS_KEY}|g" /k3s-boot/aws_conf
    - sed -i "s/##region##/${REGION}/g" /k3s-boot/aws_conf
    - mkdir -p ~/.aws && cp /k3s-boot/aws_conf ~/.aws/credentials  
    - export TF_VAR_bucket=$BUCKET
    - if [ -d ./k3s-sync-dir ]; then cp -r ./k3s-sync-dir/. /k3s-boot; else echo "not local files to copy"; fi 
    - sed -i "s/##region##/${REGION}/g" /k3s-boot/.env
variables:
  GIT_SSL_NO_VERIFY: "true"
stages:
  - "Validate Terraform"
  - "Apply Terraform Changes"
  - "Deploy Platform"
  - "Deploy PM4MLs"
  - "Reset PM4MLs"
  - "Destroy Platform"

Plan k3s Cluster:
  stage: "Validate Terraform"
  script:
    - export
    - cd /k3s-boot
    - make backend -- -auto-approve    
    - make init
    - make plan
  when: manual

Apply Terraform k3s:
  stage: "Apply Terraform Changes"
  script:
    - export
    - cd /k3s-boot
    - make backend -- -auto-approve    
    - make init
    - make plan
    - make apply -- -auto-approve
  when: manual

Destroy k3s Cluster:
  stage: "Destroy Platform"
  script:
    - export
    - cd /k3s-boot
    - make backend -- -auto-approve
    - make destroy -- -auto-approve
    - aws s3 rm --recursive s3://$BUCKET/$PM4ML_ENVIRONMENT
  when: manual

Uninstall PM4ML:
  stage: "Reset PM4MLs"
  script:
    - aws s3 cp s3://$BUCKET/$PM4ML_ENVIRONMENT/ssh-key /k3s-boot/ssh-key --sse
    - chmod 400 /k3s-boot/ssh-key
    - cd /k3s-boot
    - make backend -- -auto-approve
    - make apply -- -auto-approve
    - make uninstall-pm4ml
    - aws s3 rm --recursive s3://$BUCKET/$PM4ML_ENVIRONMENT/pm4ml-certoutput
  when: manual

Create k3s Cluster:
  stage: "Deploy Platform"
  script:
    - export
    - cd /k3s-boot
    - make backend -- -auto-approve
    - make apply -- -auto-approve
    - make k3s 
    - make kubeconfig
    - aws s3 cp /k3s-boot/kubeconfig s3://$BUCKET/$PM4ML_ENVIRONMENT/ --sse
    - aws s3 cp /k3s-boot/ssh-key s3://$BUCKET/$PM4ML_ENVIRONMENT/ --sse
    - aws s3 sync s3://$BUCKET/$PM4ML_ENVIRONMENT/ /k3s-boot/k3ss3 --sse
    - cp -r /k3s-boot/k3ss3/* /k3s-boot/ 
    - if [ ! -f /k3s-boot/vault-keys.json ]; then make vault; else echo "found vault, skipping make vault"; fi 
    - aws s3 cp /k3s-boot/vault-keys.json s3://$BUCKET/$PM4ML_ENVIRONMENT/ --sse
    - make wireguard
    - aws s3 cp /k3s-boot/wireguard.private.key s3://$BUCKET/$PM4ML_ENVIRONMENT/ --sse
    - aws s3 cp /k3s-boot/wireguard.public.key s3://$BUCKET/$PM4ML_ENVIRONMENT/ --sse
    - make monitoring
  when: manual

Install PM4MLs:
  stage: "Deploy PM4MLs"
  script:
    - aws s3 cp s3://$BUCKET/$PM4ML_ENVIRONMENT/ssh-key /k3s-boot/ssh-key --sse
    - chmod 400 /k3s-boot/ssh-key
    - cd /k3s-boot
    - make backend -- -auto-approve
    - make apply -- -auto-approve
    - make pm4ml
    - aws s3 sync /k3s-boot/pm4ml-certoutput s3://$BUCKET/$PM4ML_ENVIRONMENT/pm4ml-certoutput --sse
  when: manual
